# Generated by Django 4.2 on 2024-06-28 09:51

import account.models
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import general_service.compress


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('general_service', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('status', models.CharField(blank=True, choices=[('main_director', 'Директор'), ('director', 'Ком Директор'), ('rop', 'РОП'), ('manager', 'Менеджер'), ('marketer', 'Маркетолог'), ('accountant', 'Бухгалтер'), ('dealer', 'Дилер'), ('warehouse', 'Зав. Склад'), ('dealer_1c', 'dealer_1c'), ('hr', 'HR менеджер')], max_length=20, null=True)),
                ('uid', models.CharField(default='00000000-0000-0000-0000-000000000000', max_length=40)),
                ('pwd', models.CharField(blank=True, max_length=40, null=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('image', general_service.compress.WEBPField(blank=True, null=True, upload_to=general_service.compress.user_image_folder)),
                ('phone', models.CharField(blank=True, max_length=50, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('firebase_token', models.TextField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ('-date_joined',),
            },
            managers=[
                ('objects', account.models.MyUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BalancePlus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, default=0, max_digits=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_moderation', models.BooleanField(default=False)),
                ('is_success', models.BooleanField(default=False)),
                ('comment', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='DealerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=300, null=True)),
                ('liability', models.PositiveIntegerField(default=0)),
                ('push_notification', models.BooleanField(default=True)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('client_type', models.CharField(choices=[('online', 'online'), ('offline', 'offline')], default='offline', max_length=20)),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='DealerStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=50, null=True)),
                ('discount', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ManagerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_main', models.BooleanField(default=False)),
                ('city', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='manager_profiles', to='general_service.city')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='manager_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WarehouseProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_main', models.BooleanField(default=False)),
                ('stock', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='warehouse_profiles', to='general_service.stock')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='warehouse_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_crm', models.DecimalField(decimal_places=2, default=0, max_digits=100)),
                ('amount_1c', models.DecimalField(decimal_places=2, default=0, max_digits=100)),
                ('dealer', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='wallet', to='account.dealerprofile')),
            ],
            options={
                'ordering': ('-amount_1c',),
            },
        ),
        migrations.CreateModel(
            name='VerifyCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verify_codes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StaffMagazine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('new', 'Новый'), ('hired', 'Принят на работу'), ('fired', 'Уволен'), ('vacation', 'Отпуск'), ('restored', 'Востановлен')], default='new', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='magazines', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RopProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cities', models.ManyToManyField(related_name='rop_profiles', to='general_service.city')),
                ('managers', models.ManyToManyField(related_name='managers', to='account.managerprofile')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rop_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(blank=True, choices=[('order', 'Заказ'), ('news', 'Новости'), ('action', 'Акция'), ('notif', 'Оповещение'), ('chat', 'Чат'), ('balance', 'Пополнение баланса'), ('motivation', 'Мотивация'), ('birthday', 'День рождения'), ('recommendation', 'Рекомендация'), ('kpi', 'KPI')], max_length=14, null=True)),
                ('image', models.FileField(blank=True, null=True, upload_to='notification')),
                ('is_read', models.BooleanField(default=False)),
                ('title', models.CharField(blank=True, max_length=300, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('link_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_push', models.BooleanField(default=False)),
                ('per_cent', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='DealerStore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(blank=True, max_length=200, null=True)),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('dealer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dealer_stores', to='account.dealerprofile')),
            ],
        ),
        migrations.AddField(
            model_name='dealerprofile',
            name='dealer_status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dealer_profiles', to='account.dealerstatus'),
        ),
        migrations.AddField(
            model_name='dealerprofile',
            name='managers',
            field=models.ManyToManyField(blank=True, related_name='dealer_profiles', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='dealerprofile',
            name='price_city',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='general_service.city'),
        ),
        migrations.AddField(
            model_name='dealerprofile',
            name='price_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dealer_profiles', to='general_service.pricetype'),
        ),
        migrations.AddField(
            model_name='dealerprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='dealer_profile', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='dealerprofile',
            name='village',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dealer_profiles', to='general_service.village'),
        ),
        migrations.CreateModel(
            name='CRMNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', general_service.compress.WEBPField(blank=True, null=True, upload_to=general_service.compress.notification_image_folder)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('dispatch_date', models.DateTimeField()),
                ('status', models.CharField(choices=[('order', 'Заказ'), ('news', 'Новости'), ('action', 'Акция'), ('notif', 'Оповещение'), ('chat', 'Чат'), ('balance', 'Пополнение баланса'), ('motivation', 'Мотивация')], default='notif', max_length=100)),
                ('link_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_pushed', models.BooleanField(default=False)),
                ('dealer_profiles', models.ManyToManyField(blank=True, related_name='crm_notifications', to='account.dealerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='BalancePlusFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='balance_plus_images')),
                ('balance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='account.balanceplus')),
            ],
        ),
        migrations.AddField(
            model_name='balanceplus',
            name='dealer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='balances', to='account.dealerprofile'),
        ),
        migrations.CreateModel(
            name='BalanceHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, default=0, max_digits=100)),
                ('balance', models.DecimalField(decimal_places=2, default=0, max_digits=100)),
                ('status', models.CharField(choices=[('order', 'order'), ('wallet', 'wallet')], max_length=10)),
                ('action_id', models.IntegerField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dealer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='balance_histories', to='account.dealerprofile')),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
    ]
